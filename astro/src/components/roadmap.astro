---
interface RoadmapItem {
  title: string;
  items: string[];
}

interface TimelinePhase {
  period: string;
  items: Record<string, string[]>;
}

const categories = [
  {
    name: "Smart ICT",
    color: "blue",
    icon: "üåê"
  },
  {
    name: "IoT Applications",
    color: "green",
    icon: "üì±"
  },
  {
    name: "Data Science & Analytics",
    color: "purple",
    icon: "üìä"
  },
  {
    name: "Business Management",
    color: "orange",
    icon: "üíº"
  }
];

const timelineData: TimelinePhase[] = [
  {
    period: "2018-2022",
    items: {
      "Smart ICT": [
        "Network management System",
        "Network Topology",
        "Concept/Electronics and IT Embedded System"
      ],
      "IoT Applications": [
        "IoT systems",
        "Sensors for IoT"
      ],
      "Data Science & Analytics": [
        "Decision Support System",
        "Classification System",
        "Prediction System",
        "Cluster Analysis"
      ],
      "Business Management": [
        "Digital Marketing",
        "Micro Commerce Management",
        "Digital Tax Management"
      ]
    }
  },
  {
    period: "2022-2025",
    items: {
      "Smart ICT": [
        "LORA Systems",
        "LORA mesh for IT Systems",
        "LORA for Smart Systems"
      ],
      "IoT Applications": [
        "IoT for urban farming",
        "IoT for freshwater fish",
        "Smart Home",
        "IoT for Power Electric Distribution"
      ],
      "Data Science & Analytics": [
        "Big Data Analysis",
        "Natural Language Processing",
        "Image Processing"
      ],
      "Business Management": [
        "Governance Fiscal Independence",
        "Commercial Port Management System",
        "Document Archiving Management"
      ]
    }
  },
  {
    period: "2026-2028",
    items: {
      "Smart ICT": [
        "ICT for Industrial Automation",
        "Integrated Data Transaction"
      ],
      "IoT Applications": [
        "Smart City",
        "Smart Ecosystem",
        "Smart monitoring Systems"
      ],
      "Data Science & Analytics": [
        "Voice Command Technology",
        "Land & Building Mapping",
        "Intelligence System",
        "Integrated Information System: Trends & Predictions"
      ],
      "Business Management": [
        "Customer Relation Management System",
        "Supply Chain Management",
        "Analytic of Documents Archiving"
      ]
    }
  }
];

---

<style>
  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
  }

  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-slide-left {
    animation: slideInLeft 0.8s ease-out forwards;
  }

  .animate-slide-right {
    animation: slideInRight 0.8s ease-out forwards;
  }

  .timeline-connector {
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 2px;
    background: #e5e7eb;
    transform: translateX(-50%);
  }
</style>

<section class="max-w-7xl mx-auto px-4 py-16">
  <!-- Main Title -->
  <div class="text-center mb-12 md:mb-16 animate-fade-in-up animate-float">
    <h1 class="text-3xl md:text-4xl font-bold text-purple-700 mb-4">
      Roadmap
    </h1>
    <div class="w-12 md:w-16 h-1 bg-purple-600 mx-auto"></div>
  </div>

  <!-- Timeline Section -->
  <div class="relative">
    <div class="timeline-connector"></div>
    
    {timelineData.map((phase, phaseIndex) => (
      <div class={`mb-16 relative ${phaseIndex % 2 === 0 ? 'animate-slide-left' : 'animate-slide-right'}`}>
        <!-- Period Label -->
        <div class="text-center mb-8">
          <span class="inline-block bg-white px-6 py-2 rounded-full text-xl font-bold text-blue-700 shadow-md">
            {phase.period}
          </span>
        </div>

        <!-- Categories Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {categories.map(category => (
            <div class="bg-white rounded-lg p-6 shadow-sm hover:shadow-lg transition-all duration-300">
              <div class="flex items-center mb-4">
                <span class="text-2xl mr-2">{category.icon}</span>
                <h3 class= "text-lg font-bold" >
                  {category.name}
                </h3>
              </div>
              <ul class="space-y-3">
                {phase.items[category.name]?.map(item => (
                  <li class="flex items-center group">
                    <div class="w-2 h-2 rounded-full mr-3 transition-all duration-300 group-hover:scale-125"></div>
                    <span class="text-gray-700 group-hover:text-gray-900 transition-colors duration-300">
                      {item}
                    </span>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  // Intersection Observer for animation triggers
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in');
        }
      });
    },
    { threshold: 0.1 }
  );

  document.querySelectorAll('.animate-slide-left, .animate-slide-right').forEach((el) => 
    observer.observe(el)
  );
</script>
