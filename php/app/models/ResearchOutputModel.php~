<?php

class ResearchOutputModel
{
    private $db;
    private $table = 'research_outputs';

    public function __construct()
    {
        $this->db = new Database;
    }

    public function create($file_url, $uploaded_by, $title, $category, $description, $status = 1) {
        $this->db->query('CALL sp_CreateResearchOutput(:file_url, :uploaded_by, :title, :category, :description, :status)');
        $this->db->bind(':file_url', $file_url);
        $this->db->bind(':uploaded_by', $uploaded_by, PDO::PARAM_INT);
        $this->db->bind(':title', $title);
        $this->db->bind(':category', $category);
        $this->db->bind(':description', $description);
        $this->db->bind(':status', $status, PDO::PARAM_INT);

        try {
            $this->db->execute();
            return true;
        } catch (PDOException $e) {
            return false;
        }
    }

    public function update($id, $file_url, $title, $category, $status) {
        $this->db->query('CALL sp_UpdateResearchOutput(:id, :file_url, :title, :category, :status)');
        $this->db->bind(':id', $id, PDO::PARAM_INT);
        $this->db->bind(':file_url', $file_url);
        $this->db->bind(':title', $title);
        $this->db->bind(':category', $category);
        $this->db->bind(':status', $status, PDO::PARAM_INT);

        try {
            $this->db->execute();
            return true;
        } catch (PDOException $e) {
            return false;
        }
    }

    public function getAll() {
        $this->db->query('CALL sp_GetAllResearchOutputs()');
        return $this->db->resultSet();
    }

    public function getPendingFiles() {
        $this->db->query('CALL sp_GetResearchOutputsByStatus(:status)');
        $this->db->bind(':status', 1, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getVerifyFiles() {
        $this->db->query('CALL sp_GetResearchOutputsByStatus(:status)');
        $this->db->bind(':status', 2, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getById($id) {
        $this->db->query('CALL sp_GetResearchOutputById(:id)');
        $this->db->bind(':id', $id, PDO::PARAM_INT);
        return $this->db->single();
    }

    public function updateStatus($id, $status, $comment) {
        $query = "UPDATE research_outputs SET status = :status, comment = :comment WHERE research_output_id = :id";
        $this->db->query($query);
        $this->db->bind(':id', $id, PDO::PARAM_INT);
        $this->db->bind(':status', $status, PDO::PARAM_INT);
        $this->db->bind(':comment', $comment);
        try {
            $this->db->execute();
            return true;
        } catch (PDOException $e) {
            return false;
        }
    }

    public function countFilesByUser($userId) {
        $this->db->query('CALL sp_CountResearchOutputsByUser(:uploaded_by)');
        $this->db->bind(':uploaded_by', $userId, PDO::PARAM_INT);
        $result = $this->db->single();
        return $result['total'];
    }

    public function countFilesByUserandStatus($userId, $status) {
        $this->db->query("SELECT COUNT(*) AS total FROM research_outputs WHERE uploaded_by = :uploaded_by AND status = :status;");
        $this->db->bind(':uploaded_by', $userId, PDO::PARAM_INT);
        $this->db->bind(':status', $status, PDO::PARAM_INT);
        $result = $this->db->single();
        return $result;
    }

    public function getFilesByUser($userId) {
        $this->db->query("CALL sp_GetResearchOutputsByUser(:uploaded_by)");
        $this->db->bind(':uploaded_by', $userId, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getFilesByUserAndStatus($userId, $status, $awalData, $jumlahDataPerhalaman) {
        $this->db->query("CALL sp_GetResearchOutputsByUserAndStatus(:uploaded_by, :status, :awalData, :jumlahDataPerhalaman)");
        $this->db->bind(':uploaded_by', $userId, PDO::PARAM_INT);
        $this->db->bind(':status', $status, PDO::PARAM_INT);
        $this->db->bind(':awalData', $awalData, PDO::PARAM_INT);
        $this->db->bind(':jumlahDataPerhalaman', $jumlahDataPerhalaman, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getVerifiedResearchOutputs($limit, $offset) {
        $query = "CALL sp_GetVerifiedResearchOutputs(:limit, :offset)";
        $this->db->query($query);
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getTotalVerifiedResearchOutputs() {
        $query = "CALL sp_GetTotalVerifiedResearchOutputs()";
        $this->db->query($query);
        $result = $this->db->single();
        return $result ? (int)$result['total'] : 0;
    }

    public function getTotalPendingFiles() {
        $this->db->query("CALL sp_GetTotalPendingFiles()");
        $result = $this->db->single();
        return $result ? (int)$result['total'] : 0;
    }

    public function getPendingFilesWithPagination($limit, $offset) {
        $this->db->query("CALL sp_GetPendingFilesWithPagination(:limit, :offset)");
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getPaginatedFilesByUserAndStatus($userId, $status, $limit, $offset) {
        $this->db->query("CALL sp_GetPaginatedFilesByUserAndStatus(:UserId, :Status, :limit, :offset)");
        $this->db->bind(':UserId', $userId, PDO::PARAM_INT);
        $this->db->bind(':Status', $status, PDO::PARAM_INT);
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getPaginatedFilesByUser($userId, $limit, $offset) {
        $this->db->query("CALL sp_GetPaginatedFilesByUser(:UserId, :limit, :offset)");
        $this->db->bind(':UserId', $userId, PDO::PARAM_INT);
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function delete($id)
    {
        // Query untuk mendapatkan file URL
        $queryGetFile = "SELECT file_url FROM research_outputs WHERE research_output_id = :id";
        $this->db->query($queryGetFile);
        $this->db->bind(':id', $id);
        $result = $this->db->single();

        // Jika data tidak ditemukan
        if (!$result) {
            return ['dbDeleteSuccess' => false, 'unlinkFileSuccess' => false, 'unlinkMetaSuccess' => false];
        }

        // Ambil nama file
        $fileUrl = $result['file_url'];
        $uploadDir = __DIR__ . '/../files/research_output/';
        $metaDir = __DIR__ . '/../files/meta/';
        $filePath = $uploadDir . $fileUrl;
        $metaFilePath = $metaDir . $fileUrl . '.meta';

        // Hapus file dan metadata
        $unlinkFileSuccess = false;
        $unlinkMetaSuccess = false;

        if (file_exists($filePath)) {
            $unlinkFileSuccess = unlink($filePath);
        }

        if (file_exists($metaFilePath)) {
            $unlinkMetaSuccess = unlink($metaFilePath);
        }

        // Hapus data dari database dengan try-catch
        try {
            $queryDelete = "DELETE FROM research_outputs WHERE research_output_id = :id";
            $this->db->query($queryDelete);
            $this->db->bind(':id', $id);
            $dbDeleteSuccess = $this->db->execute();

            // Cek jumlah baris yang terpengaruh
            $affectedRows = $this->db->rowCount();

            return [
                'dbDeleteSuccess' => $affectedRows > 0,
                'unlinkFileSuccess' => $unlinkFileSuccess,
                'unlinkMetaSuccess' => $unlinkMetaSuccess,
            ];
        } catch (Exception $e) {
            return [
                'dbDeleteSuccess' => false,
                'unlinkFileSuccess' => $unlinkFileSuccess,
                'unlinkMetaSuccess' => $unlinkMetaSuccess,
            ];
        }
    }

    public function getResearchDIPASWA() {
        $this->db->query("CALL sp_GetResearchDIPASWA()");
        return $this->db->resultSet();
    }

    public function getResearchDIPAPNBP() {
        $this->db->query("CALL sp_GetResearchDIPAPNBP()");
        return $this->db->resultSet();
    }

    public function getResearchTesis() {
        $this->db->query("CALL sp_GetResearchTesis()");
        return $this->db->resultSet();
    }

    public function countAllFiles() {
        $this->db->query("CALL sp_CountAllFiles()");
        return $this->db->single()['total'];
    }

    public function getAllPaginatedFiles($itemsPerPage, $offset) {
        $this->db->query("CALL sp_GetAllPaginatedFiles(:itemsPerPage, :offset)");
        $this->db->bind(':itemsPerPage', $itemsPerPage, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function countAllFilesByStatus($status) {
        $this->db->query("CALL sp_CountAllFilesByStatus(:status)");
        $this->db->bind(':status', $status, PDO::PARAM_INT);
        return $this->db->single()['total'];
    }

    public function getAllPaginatedFilesByStatus($status, $itemsPerPage, $offset) {
        $this->db->query("CALL sp_GetAllPaginatedFilesByStatus(:status, :itemsPerPage, :offset)");
        $this->db->bind(':status', $status, PDO::PARAM_INT);
        $this->db->bind(':itemsPerPage', $itemsPerPage, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function countPendingFiles()
    {
        $this->db->query("CALL sp_CountPendingFiles()");
        return $this->db->single()['total'];
    }

    public function countRejectedFiles()
    {
        $this->db->query("CALL sp_CountRejectedFiles()");
        return $this->db->single()['total'];
    }

    public function searchResearchOutputs($keyword, $limit, $offset)
    {
        $this->db->query("CALL sp_SearchFiles(:keyword, :limit, :offset)");
        $this->db->bind(':keyword', $keyword, PDO::PARAM_STR);
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function countSearchResults($keyword)
    {
        $this->db->query("CALL sp_CountSearchFiles(:keyword)");
        $this->db->bind(':keyword', $keyword, PDO::PARAM_STR);
        return $this->db->single()['total'];
    }

    public function getAllFiles()
    {
        $this->db->query("SELECT * FROM " . $this->table);
        return $this->db->resultSet();
    }

    public function getFilesByStatus($status, $awalData, $jumlahDataPerhalaman)
    {
        $query = "SELECT * FROM " . $this->table . " 
                  WHERE status = :status 
                  ORDER BY uploaded_at DESC 
                  LIMIT :awalData, :jumlahDataPerhalaman";
        $this->db->query($query);
        $this->db->bind(':status', $status, PDO::PARAM_INT);
        $this->db->bind(':awalData', $awalData, PDO::PARAM_INT);
        $this->db->bind(':jumlahDataPerhalaman', $jumlahDataPerhalaman, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getAllVerifiedResearchOutputs()
    {
        $query = "SELECT * FROM " . $this->table . " WHERE status = :status";
        $this->db->query($query);
        $this->db->bind(':status', 2, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getNameById($userId)
    {
        $query = "SELECT name FROM users WHERE user_id = :user_id";
        $this->db->query($query);
        $this->db->bind(':user_id', $userId, PDO::PARAM_INT);
        return $this->db->single()['name'] ?? null;
    }

    public function getAllVerifiedFiles($limit, $offset)
    {
        $this->db->query("CALL sp_GetAllVerifyResearchOutputs(:limit, :offset)");
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getVerifiedFilesDIPASWA($limit, $offset)
    {
        $this->db->query('CALL sp_GetVerifyResearchDIPASWA(:limit, :offset)');
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getVerifiedFilesDIPAPNBP($limit, $offset)
    {
        $this->db->query('CALL sp_GetVerifyResearchDIPAPNBP(:limit, :offset)');
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getVerifiedFilesTesis($limit, $offset)
    {
        $this->db->query('CALL sp_GetVerifyResearchTesis(:limit, :offset)');
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getTotalFilesByCategory($category)
    {
        $query = "SELECT COUNT(*) AS total FROM research_outputs WHERE category LIKE :category AND status = 2";
        $this->db->query($query);
        $this->db->bind(':category', $category, PDO::PARAM_STR);
        $result = $this->db->single();
        return $result ? (int)$result['total'] : 0;
    }

    public function getFilesByCategory($category, $page, $limit)
    {
        $offset = ($page - 1) * $limit;
        $query = "
            SELECT * 
            FROM research_outputs
            WHERE category LIKE :category
              AND status = 2
            ORDER BY research_output_id
            LIMIT :offset, :limit
        ";
        $this->db->query($query);
        $this->db->bind(':category', $category, PDO::PARAM_STR);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function getAllPaginateFiles($page, $limit)
    {
        $offset = ($page - 1) * $limit;

        // Query data paginasi
        $this->db->query('
            SELECT * 
            FROM research_outputs
            WHERE status = 2
            ORDER BY uploaded_by DESC
            LIMIT :offset, :limit
        ');
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $data = $this->db->resultSet();

        // Query total record
        $this->db->query('SELECT COUNT(*) AS Total FROM research_outputs WHERE status = 2;');
        $total = $this->db->single();

        return ['data' => $data, 'total' => $total['Total']];
    }

    public function searchFilesUser($keyword, $userId, $limit, $offset)
    {
        $this->db->query('CALL sp_SearchFilesUser(:keyword, :userId, :limit, :offset)');
        $this->db->bind(':keyword', $keyword, PDO::PARAM_STR);
        $this->db->bind(':userId', $userId, PDO::PARAM_INT);
        $this->db->bind(':limit', $limit, PDO::PARAM_INT);
        $this->db->bind(':offset', $offset, PDO::PARAM_INT);
        return $this->db->resultSet();
    }

    public function countUserSearchResults($keyword, $userId)
    {
        $this->db->query('CALL sp_CountSearchFilesUser(:keyword, :userId)');
        $this->db->bind(':keyword', $keyword, PDO::PARAM_STR);
        $this->db->bind(':userId', $userId, PDO::PARAM_INT);
        return $this->db->single()['total'];
    }
}

